{"version":3,"file":"static/js/508.ada6fe1c.chunk.js","mappings":"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","sources":["components/ContactAddForm/ContactAddForm.Styled.js","components/ContactAddForm/ContactAddForm.jsx","components/ContactItemList/ContactItemList.Styled.js","components/ContactItemList/ContactItem.jsx","components/ContactItemList/ContactItemList.jsx","components/Filter/Filter.Styled.js","components/Filter/Filter.jsx","components/Phonebook/Phonebook.Styled.js","components/Phonebook/Phonebook.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  border: 2px solid black;\n  border-radius: 8px;\n  padding: 10px;\n\n  & label {\n    margin-bottom: 10px;\n    font-size: 1.1em;\n  }\n\n  & input {\n    max-width: 300px;\n    height: 30px;\n    font-size: 1.1em;\n    padding-left: 10px;\n    margin-bottom: 10px;\n\n    &:focus {\n      outline: 2px solid #00bfff;\n    }\n  }\n\n  & button {\n    padding: 8px;\n    max-width: 140px;\n    font-size: 1.1em;\n    border: 1px solid black;\n    border-radius: 4px;\n\n    &:hover,\n    :focus {\n      background-color: #00bfff;\n      color: #ffffff;\n      cursor: pointer;\n    }\n  }\n`;\n","import { useState } from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { nanoid } from 'nanoid';\nimport { ContactForm } from \"./ContactAddForm.Styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport { addContact } from 'redux/contactsOperations';\n\nexport default function ContactAddForm() {\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameId = nanoid();\n    const numberId = nanoid();\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n\n    const handleChange = (event) => {\n        const { name, value } = event.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                setName('');\n                setNumber('');\n        };\n    };\n\n    const inContacts = ({ name, number }) => {\n        return contacts.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase() || item.number === number);\n    };\n\n    const addNewContact = ({name, number }) => {\n        if (inContacts({ name, number })) {\n            return toast.error(`${name} is already in contacts`, {\n                theme: \"colored\"\n            });\n\n        };\n        dispatch(addContact({ name, number }));\n        toast.success(`${name} successfuly added to your list`, {\n            theme: \"colored\"\n        });\n        setName('');\n        setNumber('');\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        addNewContact({ name, number });\n};\n\n    return (\n        <>\n            <ContactForm onSubmit={handleSubmit}>\n                <label htmlFor='{nameId}'>\n                    Name\n                </label>\n                <input\n                    id={nameId}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    placeholder=\"Enter New Name\"\n                    required\n                />\n                <label htmlFor='{numberId}'>\n                    Phone Number\n                </label>\n                <input\n                    id={numberId}\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    placeholder=\"Enter New Phone Number\"\n                    required\n                />\n                <button type=\"submit\">Add contact</button>\n            </ContactForm>\n            <ToastContainer autoClose={3000} />\n        </>\n    )\n};","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  padding: 0;\n  list-style: none;\n\n  & li {\n    display: flex;\n    align-items: center;\n    max-width: 500px;\n    padding-left: 10px;\n\n    &:focus,\n    &:hover {\n      color: red;\n      cursor: pointer;\n    }\n\n    & svg {\n      width: 30px;\n      height: 30px;\n    }\n\n    & p {\n      width: 450px;\n      font-size: 1.2em;\n      margin: 10px;\n    }\n\n    & button {\n      padding: 4px;\n      font-size: 1.1em;\n      border: 1px solid black;\n      border-radius: 4px;\n\n      &:hover,\n      :focus {\n        background-color: #dc143c;\n        color: #ffffff;\n        cursor: pointer;\n      }\n    }\n  }\n`;\n","import { BsFillPersonFill } from 'react-icons/bs';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from \"../../redux/contactsOperations\";\nimport { getIsLoading } from 'redux/selectors';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport const Contact = ({ contact }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n    const [deletingItem, setDeletingItem] = useState('');\n\n    const handleDelete = () => {\n        dispatch(deleteContact(contact.id));\n        setDeletingItem(contact.id);\n        toast.warn(`${contact.name} deleted from your list`, {\n            theme: \"colored\"\n        });\n    }\n\n    useEffect(() => {\n        if (!isLoading) {\n            setDeletingItem('')\n        }\n    }, [isLoading]);\n\nreturn (\n    <li key={contact.id} >\n        <BsFillPersonFill />\n        <p>{contact.name}: {contact.number}</p>\n        <button type=\"button\" onClick={handleDelete}>{deletingItem === contact.id ? <span>Deleting...</span> : <span>Delete</span>}</button>\n        <ToastContainer autoClose={3000} />\n    </li>\n);\n\n}\n\n\n","import { ContactList } from \"./ContactItemList.Styled\";\nimport { useSelector } from 'react-redux';\nimport * as contactsSelectors from \"redux/selectors\";\nimport { Contact } from \"./ContactItem\";\nimport { IoMdPersonAdd } from 'react-icons/io';\n\n// import { fetchContacts } from \"redux/contactsOperations\";\n// import { useEffect } from \"react\";\n\nexport const ContactItemList = () => {\n    const filter = useSelector(contactsSelectors.getFilter);\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const contactAdding = useSelector(contactsSelectors.getAdding);\n    // const dispatch = useDispatch();\n    // console.log(contacts)\n\n    // useEffect(() => {\n    //     dispatch(fetchContacts());\n    // }, [dispatch]);\n\n    const getFilteredContacts = () => {\n        if (!filter) {\n            return contacts;\n        }\n        const normalFilter = filter.toLocaleLowerCase();\n        const filteredContacts = contacts.filter(({ name }) => {\n            const normalName = name.toLocaleLowerCase().includes(normalFilter);\n            return normalName;\n        })\n        // console.log('фильтр activated')\n        return filteredContacts;\n    }\n\n    const contactsToRender = getFilteredContacts();\n\nreturn (\n    <>\n        <ContactList>\n            {contactsToRender?.map(contact => (\n                <div key={contact.id}>\n                    <Contact contact={contact}/>\n                </div>\n            ))}\n            {contactAdding && <b style={{fontSize: '1.2em', color: \"green\", margin: '20px,'}}>Adding new contact...  <IoMdPersonAdd /></b>}\n        </ContactList>\n    </>\n);\n};\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 10px;\n\n  & label {\n    margin-bottom: 20px;\n    font-size: 1.1em;\n  }\n\n  & input {\n    max-width: 300px;\n    height: 30px;\n    font-size: 1.1em;\n    padding-left: 10px;\n    margin-bottom: 10px;\n\n    &:focus {\n      outline: 2px solid #00bfff;\n    }\n  }\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { FilterStyled } from \"./Filter.Styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const onChange = (event) => {\n        dispatch(setFilter(event.target.value));\n    }\n    \n    const filterId = nanoid();\n\n    return (\n        <FilterStyled>\n            <label htmlFor='filterId'>Find contacts by name</label>\n            <input id={filterId} type=\"text\" name=\"filter\" value={filter}  onChange={onChange} placeholder=\"input something to search\"/>\n        </FilterStyled>\n    )\n}\n","import styled from 'styled-components';\n\nexport const PhonebookStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n","import ContactAddForm from \"../ContactAddForm/ContactAddForm\";\nimport { ContactItemList } from \"../ContactItemList/ContactItemList\";\nimport { Filter } from \"../Filter/Filter\";\nimport { PhonebookStyled } from \"./Phonebook.Styled\";\nimport { fetchContacts } from \"redux/contactsOperations\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport * as contactsSelectors from \"../../redux/selectors\";\nimport { BiRun } from 'react-icons/bi';\n\nexport default function Phonebook() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(contactsSelectors.getIsLoading);\n    const error = useSelector(contactsSelectors.getError);\n    \n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    return <PhonebookStyled>\n        <h1>Phonebook</h1>\n        <ContactAddForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <b>Request in progress...<BiRun /></b>}\n        <ContactItemList />\n    </PhonebookStyled>\n}\n"],"names":["ContactForm","styled","ContactAddForm","useState","name","setName","number","setNumber","nameId","nanoid","numberId","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","event","currentTarget","value","addNewContact","find","item","toLocaleLowerCase","inContacts","toast","theme","addContact","onSubmit","e","preventDefault","htmlFor","id","type","onChange","pattern","title","placeholder","required","autoClose","ContactList","Contact","contact","isLoading","getIsLoading","deletingItem","setDeletingItem","useEffect","onClick","deleteContact","ContactItemList","filter","contactsSelectors","contactAdding","contactsToRender","normalFilter","includes","getFilteredContacts","map","style","fontSize","color","margin","FilterStyled","Filter","getFilter","filterId","setFilter","target","PhonebookStyled","Phonebook","error","fetchContacts"],"sourceRoot":""}